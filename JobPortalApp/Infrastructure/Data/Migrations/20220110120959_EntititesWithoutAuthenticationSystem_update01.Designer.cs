// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220110120959_EntititesWithoutAuthenticationSystem_update01")]
    partial class EntititesWithoutAuthenticationSystem_update01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Core.Entities.AppliedJobs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateApplied")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobAppliedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobAppliedId");

                    b.ToTable("AppliedJobs");
                });

            modelBuilder.Entity("Core.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Core.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Hobbies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Languages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.PersonalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillsId");

                    b.ToTable("PersonalSkill");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.ProfessionalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillsId");

                    b.ToTable("ProfessionalSkill");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Core.Entities.UserProfile._UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillsId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Education_UserProfile", b =>
                {
                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("EducationId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Education_UserProfile");
                });

            modelBuilder.Entity("Experience_UserProfile", b =>
                {
                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("ExperienceId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Experience_UserProfile");
                });

            modelBuilder.Entity("Hobbies_UserProfile", b =>
                {
                    b.Property<int>("HobbiesId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("HobbiesId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Hobbies_UserProfile");
                });

            modelBuilder.Entity("Languages_UserProfile", b =>
                {
                    b.Property<int>("LanguagesId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("LanguagesId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Languages_UserProfile");
                });

            modelBuilder.Entity("Core.Entities.AppliedJobs", b =>
                {
                    b.HasOne("Core.Entities.Job", "JobApplied")
                        .WithMany()
                        .HasForeignKey("JobAppliedId");

                    b.Navigation("JobApplied");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.PersonalSkill", b =>
                {
                    b.HasOne("Core.Entities.UserProfile.Skills", null)
                        .WithMany("PersonalSkill")
                        .HasForeignKey("SkillsId");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.ProfessionalSkill", b =>
                {
                    b.HasOne("Core.Entities.UserProfile.Skills", null)
                        .WithMany("ProfessionalSkill")
                        .HasForeignKey("SkillsId");
                });

            modelBuilder.Entity("Core.Entities.UserProfile._UserProfile", b =>
                {
                    b.HasOne("Core.Entities.UserProfile.Skills", "Skills")
                        .WithMany()
                        .HasForeignKey("SkillsId");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Education_UserProfile", b =>
                {
                    b.HasOne("Core.Entities.UserProfile.Education", null)
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserProfile._UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Experience_UserProfile", b =>
                {
                    b.HasOne("Core.Entities.UserProfile.Experience", null)
                        .WithMany()
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserProfile._UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hobbies_UserProfile", b =>
                {
                    b.HasOne("Core.Entities.UserProfile.Hobbies", null)
                        .WithMany()
                        .HasForeignKey("HobbiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserProfile._UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Languages_UserProfile", b =>
                {
                    b.HasOne("Core.Entities.UserProfile.Languages", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserProfile._UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Skills", b =>
                {
                    b.Navigation("PersonalSkill");

                    b.Navigation("ProfessionalSkill");
                });
#pragma warning restore 612, 618
        }
    }
}
