// <auto-generated />
<<<<<<< HEAD
using System;
=======
>>>>>>> ToDoApp
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

<<<<<<< HEAD
            modelBuilder.Entity("Core.Entities.AppliedJobs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateApplied")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobAppliedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobAppliedId");

                    b.ToTable("AppliedJobs");
                });

=======
>>>>>>> ToDoApp
            modelBuilder.Entity("Core.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

<<<<<<< HEAD
                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

=======
>>>>>>> ToDoApp
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });
<<<<<<< HEAD

            modelBuilder.Entity("Core.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Hobbies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Languages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.PersonalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillsId");

                    b.ToTable("PersonalSkill");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.ProfessionalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillsId");

                    b.ToTable("ProfessionalSkill");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Core.Entities.UserProfile._UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("HobbyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillsId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Core.Entities.AppliedJobs", b =>
                {
                    b.HasOne("Core.Entities.Job", "JobApplied")
                        .WithMany()
                        .HasForeignKey("JobAppliedId");

                    b.Navigation("JobApplied");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Education", b =>
                {
                    b.HasOne("Core.Entities.UserProfile._UserProfile", "UserProfile")
                        .WithMany("Education")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Experience", b =>
                {
                    b.HasOne("Core.Entities.UserProfile._UserProfile", "UserProfile")
                        .WithMany("Experience")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Hobbies", b =>
                {
                    b.HasOne("Core.Entities.UserProfile._UserProfile", "UserProfile")
                        .WithMany("Hobbies")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Languages", b =>
                {
                    b.HasOne("Core.Entities.UserProfile._UserProfile", "UserProfile")
                        .WithMany("Languages")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.PersonalSkill", b =>
                {
                    b.HasOne("Core.Entities.UserProfile.Skills", "Skills")
                        .WithMany("PersonalSkill")
                        .HasForeignKey("SkillsId");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.ProfessionalSkill", b =>
                {
                    b.HasOne("Core.Entities.UserProfile.Skills", "Skills")
                        .WithMany("ProfessionalSkill")
                        .HasForeignKey("SkillsId");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Core.Entities.UserProfile._UserProfile", b =>
                {
                    b.HasOne("Core.Entities.UserProfile.Skills", "Skills")
                        .WithMany()
                        .HasForeignKey("SkillsId");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Core.Entities.UserProfile.Skills", b =>
                {
                    b.Navigation("PersonalSkill");

                    b.Navigation("ProfessionalSkill");
                });

            modelBuilder.Entity("Core.Entities.UserProfile._UserProfile", b =>
                {
                    b.Navigation("Education");

                    b.Navigation("Experience");

                    b.Navigation("Hobbies");

                    b.Navigation("Languages");
                });
=======
>>>>>>> ToDoApp
#pragma warning restore 612, 618
        }
    }
}
