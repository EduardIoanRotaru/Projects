Workflow

Create database Schemas
Seed Data

Authorization and Authentification for each project
Repository Pattern and Specification Pattern
Automapper
DTO's
Services
Controllers


...................................................................... 04.01.2022

Done - Create projects
Done - Rewind netcore cli commands, rewind git commands 
Done - Plan designs for all aps
Done - Install all packages

...................................................................... 09.01.2022

Done - Database Relationships - First UML on paper 
Done - Add Entities 
Done - Update DataContext
Done - Add Dtos
Done - AutoMapper

Done - Sort out the .gitignore and remove all the useless files in repo

...................................................................... 11.01.2022

Generate all tables


Done - Fix QuizApp reference problem (Removed class library projects)
Done - ShopApp fix the one-to-many problems
Done - Finish ToDoApp table generation

Done - Check resources for Authentication and Authorization

Finish ToDoApp
	Done - Add Angular routing
	Done - Seed Data with umpcoming tasks and projects,
		Done - Not Clear of relationships: Project with many tasks not right in db

	Done - Today Component - Can add anonymous, limit of 10 tasks, remove after 24h 
	Done - Add comments to today tasks. + CRUD
	Done - Design the today tasks final 
	Done - Validations + errors, disable btn, min len and required, aaaand getters for the form fields.
	Done - Add comment bugged
	Done - Cancel adding a comment
	Done - Design sidebar	

	Add repository and unit of work pattern
		- TaskRepository
		- Projects Repository
		- UpcomingTasksRepository		

	Done - API (tasks, upcomingtasks, projects)
	Done - Test in Postman

	Client - Add Services
	       - Add Components, design each one on spot
	       - Add security
	       - Final touches
	       - Publish

	Features - Add other users to projects, give them permissions/claims, can add/delete/edit task, or just can comment, show usernames
		 - Assign today tasks to a Project(add extra fields such as duedate)
		 - Adding a date, except today will move it in upcoming tasks.
		 - Email validation when user creates account

	Publish version 2

Add Authentication and Authorization business logic(jwt, Identity, OAuth2 or simply cookies/localstorage)
Postman test each one

Add Login/Register html page for all projects
Add branches for each project backend

Custom modelbuilder where needed - e.g oncascade delete
Seed Data

Git merge branches with master

...................................................................... 13.01.2022

Add repository pattern or specification pattern where necessary
Chat app, add general chat, list of users, private chat, emoticons. No auth, only localstorage

...................................................................... 14.01.2022

Filter, Pagination, Sort, Search where needed
CRUD where needed

All components in Angular, lazy loading and routing 
"Design" all html pages 

Services 
Components business logic

...................................................................... 21.01.2022

Deploy all

-------------------------------------------------------------------------- Commands to keep in mind
dotnet-ef migrations add InitialCreate -o Data -s ../ToDoAPI
dotnet-ef migrations add " " -o Data/Migrations --project Infrastructure -s JobPortal-MVC
dotnet-ef database update -s JobPortal-MVC

dotnet-ef -h for all overloads

git add -u .
git rm -r --cached path_to_your_folder/

enable-migrations -MigrationsDirectory "Data"

When using debugger in vscode attach the project where is the breakpoint

Docummentation
Refresh MVC - https://www.youtube.com/watch?v=E7Voso411Vs&ab_channel=ProgrammingwithMosh
Rfresh Firebase - https://developers.google.com/codelabs/building-a-web-app-with-angular-and-firebase#10
OAuth - https://www.youtube.com/watch?v=NRU_KdUSjD4&ab_channel=ValentinDespa
AutoMapper Quick tips - https://code-maze.com/automapper-net-core/
Git Branches - https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches
EF relationships Refresh - https://www.learnentityframeworkcore.com/configuration/one-to-many-relationship-configuration
                         - https://entityframework.net/one-to-many-relationship

Bootstrap icons - https://icons.getbootstrap.com/#install
	  grid  - https://getbootstrap.com/docs/4.0/layout/grid/
		- https://www.tutorialrepublic.com/faq/how-to-center-a-column-in-bootstrap.php

https://json-generator.com/
Angular refresh - https://angular.io/guide/inputs-outputs
		- https://fireship.io/lessons/basics-reactive-forms-in-angular/
		- https://angular.io/guide/form-validation